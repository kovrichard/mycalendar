# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push
# event but only for the master branch
on:
  push:
    branches: [ master ]

env:
  POSTGRES_DB: calendar_test_db
  POSTGRES_USER: test_db_user
  POSTGRES_PASSWORD: test_db_pw
  DB_HOST: localhost
  DB_URL: postgres://test_db_user:test_db_pw@localhost:5432/calendar_test_db

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # container: python:3.8.3-alpine

    services:
      db:
        image: postgres:12.3
        env:
          POSTGRES_PASSWORD: test_db_pw
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install poetry
        uses: dschep/install-poetry-action@v1.2
        with:
          version: 1.0.10

      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-$
          restore-keys: |
            poetry-$

      # Runs a set of commands using the runners shell
      - name: Update and install dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install curl gcc musl-dev
          poetry install
      - name: Migrate database
        run: poetry run alembic upgrade head
      - name: Run linter
        run: |
          poetry run isort --check-only mycalendar tests alembic
          poetry run black --check mycalendar tests alembic
      - name: Run tests
        run: poetry run nose2 -v
